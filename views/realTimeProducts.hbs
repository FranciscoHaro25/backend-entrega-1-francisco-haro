<div class="row">
  <div class="col-12">
    <h1>Productos en Tiempo Real</h1>
    <p class="text-muted">Esta p√°gina se actualiza autom√°ticamente usando
      WebSockets</p>
    <div id="connectionStatus" class="alert alert-warning">
      Conectando...
    </div>
  </div>
</div>

<!-- Formulario para agregar productos -->
<div class="card mb-4">
  <div class="card-header">
    <h5>Agregar Nuevo Producto</h5>
  </div>
  <div class="card-body">
    <form id="productForm">
      <div class="row">
        <div class="col-md-6">
          <label>T√≠tulo:</label>
          <input type="text" id="title" class="form-control" required />
        </div>
        <div class="col-md-6">
          <label>Descripci√≥n:</label>
          <input type="text" id="description" class="form-control" required />
        </div>
      </div>
      <div class="row mt-2">
        <div class="col-md-3">
          <label>C√≥digo:</label>
          <input type="text" id="code" class="form-control" required />
        </div>
        <div class="col-md-3">
          <label>Precio:</label>
          <input
            type="number"
            id="price"
            class="form-control"
            step="0.01"
            required
          />
        </div>
        <div class="col-md-3">
          <label>Stock:</label>
          <input type="number" id="stock" class="form-control" required />
        </div>
        <div class="col-md-3">
          <label>Categor√≠a:</label>
          <input type="text" id="category" class="form-control" required />
        </div>
      </div>
      <div class="mt-3">
        <button type="submit" class="btn btn-primary">Agregar Producto</button>
      </div>
    </form>
  </div>
</div>

<!-- Lista de productos -->
<div class="row" id="productList">
  {{#each products}}
    <div class="col-md-6 col-lg-4 mb-3" data-product-id="{{this.id}}">
      <div class="card">
        <div class="card-body">
          <h5 class="card-title">{{this.title}}</h5>
          <p class="card-text">{{this.description}}</p>
          <p class="text-muted">C√≥digo: {{this.code}}</p>
          <p class="fw-bold">${{this.price}}</p>
          <p class="small">Stock:
            {{this.stock}}
            | Categor√≠a:
            {{this.category}}</p>
          <button
            class="btn btn-danger btn-sm"
            onclick="deleteProduct({{this.id}})"
          >
            üóëÔ∏è Eliminar
          </button>
        </div>
      </div>
    </div>
  {{/each}}
</div>

<!-- Si no hay productos -->
<div id="noProducts" style="display: none;">
  <div class="alert alert-info">
    <h4>No hay productos</h4>
    <p>Agrega tu primer producto usando el formulario de arriba.</p>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  console.log('üöÄ Inicializando WebSocket...'); // Conectar con el servidor de
  WebSockets const socket = io({ transports: ['websocket', 'polling'] }); //
  Referencias a elementos const productForm =
  document.getElementById('productForm'); const productList =
  document.getElementById('productList'); const noProducts =
  document.getElementById('noProducts'); const connectionStatus =
  document.getElementById('connectionStatus'); // Eventos del socket
  socket.on('connect', () => { console.log('‚úÖ Conectado al servidor WebSocket -
  ID:', socket.id); connectionStatus.className = 'alert alert-success';
  connectionStatus.textContent = '‚úÖ Conectado - WebSocket funcionando'; });
  socket.on('disconnect', () => { console.log('‚ùå Desconectado del servidor');
  connectionStatus.className = 'alert alert-danger';
  connectionStatus.textContent = '‚ùå Desconectado - Reintentando...'; });
  socket.on('connect_error', (error) => { console.error('üí• Error de conexi√≥n:',
  error); connectionStatus.className = 'alert alert-danger';
  connectionStatus.textContent = 'üí• Error de conexi√≥n WebSocket'; }); //
  Recibir lista actualizada de productos socket.on('updateProducts', (products)
  => { console.log('üì¶ Productos actualizados v√≠a WebSocket:', products.length,
  'productos'); updateProductList(products); }); // Confirmaci√≥n de producto
  agregado socket.on('productAdded', (data) => { console.log('‚úÖ Confirmaci√≥n:
  Producto agregado exitosamente', data.product); }); // Confirmaci√≥n de
  producto eliminado socket.on('productDeleted', (data) => { console.log('‚úÖ
  Confirmaci√≥n: Producto eliminado exitosamente, ID:', data.productId); }); //
  Manejar errores socket.on('error', (error) => { console.error('‚ùå Error del
  servidor:', error); alert('Error del servidor: ' + error.message); }); //
  Agregar producto via formulario WebSocket if (productForm) {
  productForm.addEventListener('submit', (e) => { e.preventDefault(); const
  productData = { title: document.getElementById('title').value.trim(),
  description: document.getElementById('description').value.trim(), code:
  document.getElementById('code').value.trim(), price:
  parseFloat(document.getElementById('price').value), stock:
  parseInt(document.getElementById('stock').value), category:
  document.getElementById('category').value.trim() }; // Validaciones b√°sicas if
  (!productData.title || !productData.description || !productData.code) {
  alert('Por favor completa todos los campos requeridos'); return; } if
  (isNaN(productData.price) || productData.price <= 0) { alert('El precio debe
  ser un n√∫mero mayor a 0'); return; } if (isNaN(productData.stock) ||
  productData.stock < 0) { alert('El stock debe ser un n√∫mero mayor o igual a
  0'); return; } console.log('üöÄ Enviando nuevo producto v√≠a WebSocket:',
  productData); socket.emit('newProduct', productData); // Limpiar formulario
  productForm.reset(); }); } // Eliminar producto via WebSocket function
  deleteProduct(id) { if (confirm('¬øEst√°s seguro de eliminar este producto?')) {
  console.log('üóëÔ∏è Eliminando producto ID v√≠a WebSocket:', id);
  socket.emit('deleteProduct', parseInt(id)); } } // Actualizar la lista de
  productos en tiempo real function updateProductList(products) {
  console.log('üîÑ Actualizando vista DOM con', products.length, 'productos'); if
  (!products || products.length === 0) { productList.innerHTML = '';
  noProducts.style.display = 'block'; return; } noProducts.style.display =
  'none'; const productsHTML = products.map(product => ` <div class="col-md-6
  col-lg-4 mb-3" data-product-id="${product.id}"> <div class="card"> <div
  class="card-body"> <h5 class="card-title">${product.title}</h5> <p
  class="card-text">${product.description}</p> <p class="text-muted">C√≥digo:
  ${product.code}</p> <p class="fw-bold">$${product.price}</p> <p
  class="small">Stock: ${product.stock} | Categor√≠a: ${product.category}</p>
  <button class="btn btn-danger btn-sm" onclick="deleteProduct(${product.id})">
  üóëÔ∏è Eliminar </button> </div> </div> </div> `).join(''); productList.innerHTML
  = productsHTML; console.log('‚úÖ Lista de productos actualizada en el DOM
  exitosamente'); } // Hacer disponible globalmente window.deleteProduct =
  deleteProduct; console.log('üìù Script WebSocket cargado y configurado
  correctamente');
</script>