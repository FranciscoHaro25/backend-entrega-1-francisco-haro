<div class="row">
  <div class="col-12">
    <h1>Productos en Tiempo Real</h1>
    <p class="text-muted">Esta página se actualiza automáticamente usando
      WebSockets</p>
    <div id="connectionStatus" class="alert alert-warning">
      Conectando...
    </div>
  </div>
</div>

<!-- Formulario para agregar productos -->
<div class="card mb-4">
  <div class="card-header">
    <h5>Agregar Nuevo Producto</h5>
  </div>
  <div class="card-body">
    <form id="productForm">
      <div class="row">
        <div class="col-md-6">
          <label>Título:</label>
          <input type="text" id="title" class="form-control" required />
        </div>
        <div class="col-md-6">
          <label>Descripción:</label>
          <input type="text" id="description" class="form-control" required />
        </div>
      </div>
      <div class="row mt-2">
        <div class="col-md-3">
          <label>Código:</label>
          <input type="text" id="code" class="form-control" required />
        </div>
        <div class="col-md-3">
          <label>Precio:</label>
          <input
            type="number"
            id="price"
            class="form-control"
            step="0.01"
            required
          />
        </div>
        <div class="col-md-3">
          <label>Stock:</label>
          <input type="number" id="stock" class="form-control" required />
        </div>
        <div class="col-md-3">
          <label>Categoría:</label>
          <input type="text" id="category" class="form-control" required />
        </div>
      </div>
      <div class="mt-3">
        <button type="submit" class="btn btn-primary">Agregar Producto</button>
      </div>
    </form>
  </div>
</div>

<!-- Lista de productos -->
<div class="row" id="productList">
  {{#each products}}
    <div class="col-md-6 col-lg-4 mb-3" data-product-id="{{this.id}}">
      <div class="card">
        <div class="card-body">
          <h5 class="card-title">{{this.title}}</h5>
          <p class="card-text">{{this.description}}</p>
          <p class="text-muted">Código: {{this.code}}</p>
          <p class="fw-bold">${{this.price}}</p>
          <p class="small">Stock:
            {{this.stock}}
            | Categoría:
            {{this.category}}</p>
          <button
            class="btn btn-danger btn-sm"
            onclick="deleteProduct({{this.id}})"
          >
            Eliminar
          </button>
        </div>
      </div>
    </div>
  {{/each}}
</div>

<!-- Si no hay productos -->
<div id="noProducts" style="display: none;">
  <div class="alert alert-info">
    <h4>No hay productos</h4>
    <p>Agrega tu primer producto usando el formulario de arriba.</p>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  // Conectar con el servidor de WebSockets const socket = io(); // Referencias
  a elementos const productForm = document.getElementById('productForm'); const
  productList = document.getElementById('productList'); const noProducts =
  document.getElementById('noProducts'); const connectionStatus =
  document.getElementById('connectionStatus'); // Eventos del socket
  socket.on('connect', () => { console.log('Conectado al servidor');
  connectionStatus.className = 'alert alert-success';
  connectionStatus.textContent = 'Conectado - WebSocket funcionando'; });
  socket.on('disconnect', () => { console.log('Desconectado del servidor');
  connectionStatus.className = 'alert alert-danger';
  connectionStatus.textContent = 'Desconectado - Reintentando...'; }); //
  Recibir lista actualizada de productos socket.on('updateProducts', (products)
  => { console.log('Productos actualizados:', products);
  updateProductList(products); }); // Manejar errores socket.on('error', (error)
  => { console.error('Error:', error); alert('Error: ' + error.message); }); //
  Agregar producto productForm.addEventListener('submit', (e) => {
  e.preventDefault(); const productData = { title:
  document.getElementById('title').value, description:
  document.getElementById('description').value, code:
  document.getElementById('code').value, price:
  parseFloat(document.getElementById('price').value), stock:
  parseInt(document.getElementById('stock').value), category:
  document.getElementById('category').value }; console.log('Enviando producto:',
  productData); socket.emit('newProduct', productData); productForm.reset(); });
  // Eliminar producto function deleteProduct(id) { if (confirm('¿Estás seguro
  de eliminar este producto?')) { console.log('Eliminando producto:', id);
  socket.emit('deleteProduct', id); } } // Actualizar la lista de productos
  function updateProductList(products) { console.log('Actualizando vista con',
  products.length, 'productos'); if (products.length === 0) {
  productList.innerHTML = ''; noProducts.style.display = 'block'; return; }
  noProducts.style.display = 'none'; productList.innerHTML =
  products.map(product => ` <div class="col-md-6 col-lg-4 mb-3"
  data-product-id="${product.id}"> <div class="card"> <div class="card-body">
  <h5 class="card-title">${product.title}</h5> <p
  class="card-text">${product.description}</p> <p class="text-muted">Código:
  ${product.code}</p> <p class="fw-bold">$${product.price}</p> <p
  class="small">Stock: ${product.stock} | Categoría: ${product.category}</p>
  <button class="btn btn-danger btn-sm" onclick="deleteProduct(${product.id})">
  Eliminar </button> </div> </div> </div> `).join(''); }
</script>